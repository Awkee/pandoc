#summary To-do list.

== For 0.3 release ==

When ready:
  * Tag 0.3 branch
  * Create source tarball
  * Create OSX disk image and Windows exe (Note: Makefile target for OSX package will have to be changed to conform to the naming scheme below.)

Proposed naming scheme:
  * `pandoc-0.3.tar.gz` - source tarball
  * `pandoc-0.3-osx.dmg` - OSX disk image (compiled on PPC but will work on all Macs)
  * `pandoc-0.3-windows.zip` - zip file containing Windows binary and documentation

Note:  debs will be available elsewhere, so we need not put them in Downloads.

Add a Makefile target to create windows zipfile (given `pandoc.exe`).  Something like this:
{{{
FILES=README COPYING COPYRIGHT
for f in $(FILES); do
  sed -e 's/$'"/`echo \\\r`/" $$f > $$f.txt # converts line endings;
done
zip -r pandoc-0.3-windows.zip pandoc.exe README.txt COPYRIGHT.txt COPYING.txt
}}}

Do we need a special version of README for the windows binary?  Presumably yes -- 
we need to remove reference to the wrappers (easy with sed).  Perhaps we also need an INSTALL-WIN file.  (Now underway with README-WINDOWS.  This is tricky.  Some may have
Cygwin, so perhaps we should include wrappers in the binary distribution?)

Website:
  * Download links need to point to Google Code downloads.
  * roktas suggests having `README.pdf`, `README.rtf`, `README.rst`, etc. on the website, so people can see what Pandoc can do.  Alternatively, have an Examples section, including S5 examples.

Look into options for a binary package for linux.  Perhaps this is not needed, with the debian packages, but not everyone uses debs.  How hard would it be to make an rpm?  Or just a tarball with a simplified Makefile that just has the install targets?

== Improvements ==

Consider changing the default Pandoc data structure so that it is more "hierarchical":
  * Instead of section heading blocks, it would have section blocks, each with a title and a list of other elements, which might in turn be sections.
  * It wouldn't be too hard to change the readers to parse this way.  And this would allow more flexibility for the writers, especially for the proposed Docbook writer, which needs a hierarchical structure of sections. 
  * Potential problem:  some existing code assumes e.g. that note blocks are
at the outer level (see RTF writer); this would have to be rewritten.
  * It would be good to have a general "tree walker" utility function that makes it easy to, say, walk through the hierarchy filtering out note blocks.

Use XHTML library for HTML writer?  Not yet - it's not standard with 6.4.2 (but is with 6.6).  When we can drop support for 6.4.2, we can use it.

Figure out whether S5 really needs the XHTML header.  If not, change to HTML for consistency.  Or, change pandoc's default header to XHTML.

Note that pandoc's HTML output fails to validate completely (w3c), either as HTML or as XHTML.
  * HTML doesn't like the `\>` at the end of `<meta>` tags.
  * But if we remove them, we'll have trouble with S5 output, which seems to need the xhtml header?
  * There's also a problem with the email obfuscation scheme. `<noscript>` isn't allowed inside `<p>` blocks.  `<script>` _is_ allowed!  This doesn't seem to be a practical problem with the browsers I've tried, but it would be nice to validate.  We could move to a different email obfuscation technique (see e.g. the nice idea at http://subversion.tigris.org/security.html), but this one allows us to have mailto links.

== New feature ideas ==

Add format-independent "table of contents" macro.  Something like this:
{{{

%contents

}}}
in a block by itself.  To implement this, we might add a 'TableOfContents'
block type.  In latex output, this would come out as `\tableofcontents`,
in HTML, Markdown, and RTF, we'd have to parse the document for headers
(or sections - see below) and build a nested list with internal links.
In RST, we could just use the existing contents directive. 

New [http://www.oasis-open.org/docbook/xml/simple/sdocbook/index.html simplified docbook] writer (underway in experimental docbook-writer branch):
  * See above on hierachical data structure.  A less elegant solution would be to reorganize the Pandoc data structure into a hierarchy after parsing, but before the Docbook writer is called.

Acronyms?  Perhaps like this:
{{{
the [AAAS]

[AAAS]: acronym for "American association for the advancement of science"
}}}
yields
{{{
<acronym title="American association for the advancement of science">AAAS</acronym>
}}}